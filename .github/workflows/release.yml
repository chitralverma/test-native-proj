name: Create Release
on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - main

permissions:
  contents: read

jobs:
  get-version:
    name: Compute and verify the version number
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'sbt'
      - name: Get Version
        id: version
        run: echo "snapshot=$(sbt -no-colors 'print version' | tail -n 1)" >> $GITHUB_OUTPUT

      - name: Show Version
        run: echo $(sbt -no-colors 'print version' | tail -n 1)

      - name: Set Version in ENV
        run:
          echo "PROJECT_VERSION=${{ steps.version.outputs.snapshot }}" >> $GITHUB_ENV

      - name: Add Version to summary
        run: echo "${{ steps.version.outputs.snapshot }}" >> $GITHUB_STEP_SUMMARY

  build-natives:
    name: ${{ matrix.arch }} native build
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./native
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64-unknown-linux-gnu
            packages: ""

          - os: ubuntu-latest
            arch: x86_64-pc-windows-gnu
            packages: "sudo apt update && sudo apt install mingw-w64"

          - os: windows-latest
            arch: x86_64-pc-windows-msvc
            packages: ""

          - os: macos-latest
            arch: x86_64-apple-darwin
            packages: ""

          - os: macos-latest
            arch: aarch64-apple-darwin
            packages: ""
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'sbt'

      - name: Install system packages
        run: ${{ matrix.packages }}

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.arch }}-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.arch }}-${{ runner.os }}-cargo-

      - name: Compile native library for ${{ matrix.arch }}
        run: |
          rustup target add ${{ matrix.arch }}
          cargo build --release --target ${{ matrix.arch }} --target-dir ./target/${{ matrix.arch }}
          ll ./target/release/
#          echo "CARGO_BUILD_TARGET=${{ matrix.arch }}" >> $GITHUB_ENV
#          sbt nativeCompile

      - name: Temporarily save native library for ${{ matrix.arch }}
        uses: actions/upload-artifact@v3
        with:
          name: native_${{ matrix.arch }}
          path: ./target/release/*.{so,dll,dylib}
          retention-days: 1

  publish:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [ build-natives, get-version ]
    defaults:
      run:
        working-directory: ./native
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: /target/release/
      - name: List the built artifacts
        run: find .target/release


  #      - name: Build release musl library
  #        run: |
  #          rustup target add x86_64-unknown-linux-musl
  #          RUSTFLAGS="-C target-feature=-crt-static" cargo build --target x86_64-unknown-linux-musl --release
  #      - name: Rename static lib
  #        run: mv target/release/libpolar.a target/libpolar-${{runner.os}}.a
  #      - name: Rename static lib
  #        run: mv target/x86_64-unknown-linux-musl/release/libpolar.a target/libpolar-musl.a
  #      - uses: actions/upload-artifact@v3
  #        with:
  #          name: my_library
  #          path: target/release/libpolar.so
  #      - uses: actions/upload-artifact@v2
  #        with:
  #          name: oso_library
  #          path: polar-c-api/polar.h
  #      - uses: actions/upload-artifact@v2
  #        with:
  #          name: oso_static_library
  #          path: |
  #            target/libpolar-${{runner.os}}.a
  #            target/libpolar-musl.a
  #      - uses: actions/upload-artifact@v2
  #        with:
  #          name: oso_static_library
  #          path: polar-c-api/polar.h
  #

  #
  #  windows_libs:
  #    name: Build release libraries on Windows
  #    runs-on: windows-latest
  #    needs: [ version ]
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: actions/cache@v2
  #        with:
  #          path: |
  #            ~/.cargo/registry
  #            ~/.cargo/git
  #            target
  #          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
  #      - name: Install Rust stable toolchain
  #        uses: actions-rs/toolchain@v1
  #        with:
  #          profile: minimal
  #          toolchain: stable
  #          override: true
  #      - name: Build release library
  #        run: cargo build --release
  #      - name: Build release MinGW library
  #        run: |
  #          rustup target add x86_64-pc-windows-gnu
  #          cargo build --target x86_64-pc-windows-gnu --release
  #      - name: Rename static lib
  #        run: |
  #          mv -Force target/x86_64-pc-windows-gnu/release/libpolar.a target/x86_64-pc-windows-gnu/release/libpolar-${{runner.os}}.a
  #      - uses: actions/upload-artifact@v2
  #        with:
  #          name: oso_library
  #          path: target/release/polar.dll
  #      - uses: actions/upload-artifact@v2
  #        with:
  #          name: oso_static_library
  #          path: target/release/polar.lib
  #      - uses: actions/upload-artifact@v2
  #        with:
  #          name: oso_static_library
  #          path: target/x86_64-pc-windows-gnu/release/libpolar-${{runner.os}}.a
  #      - uses: actions/upload-artifact@v2
  #        with:
  #          name: oso_static_library
  #          path: polar-c-api/polar.h








  #  build_jar:
  #    name: Build jar.
  #    runs-on: ubuntu-latest
  #    needs: [linux_libs, macos_libs, windows_libs]
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Set version env
  #        id: version
  #        run: echo "::set-output name=oso_version::$(cat VERSION)"
  #      - uses: actions/setup-java@v1
  #        with:
  #          java-version: "11"
  #      - name: Download dylibs
  #        uses: actions/download-artifact@v1
  #        with:
  #          name: oso_library
  #      - name: Copy libraries into resources.
  #        run: |
  #          mkdir -p languages/java/oso/src/main/resources/linux
  #          cp -r oso_library/libpolar.so languages/java/oso/src/main/resources/linux/
  #          mkdir -p languages/java/oso/src/main/resources/macos
  #          cp -r oso_library/libpolar-macOS-fat.dylib languages/java/oso/src/main/resources/macos/libpolar.dylib
  #          mkdir -p languages/java/oso/src/main/resources/win
  #          cp -r oso_library/polar.dll languages/java/oso/src/main/resources/win/
  #      - name: Test
  #        run: |
  #          mvn -q test
  #        working-directory: languages/java/oso
  #      - name: Build
  #        run: |
  #          mvn -q package
  #        working-directory: languages/java/oso
  #      - uses: actions/upload-artifact@v2
  #        with:
  #          name: jar
  #          path: languages/java/oso/target/oso-${{ steps.version.outputs.oso_version }}.jar





#  release:
#    name: Create release
#    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/tags/')
#    needs:
#      [
#        #        build_jar,
#      ]
#    steps:
#      - name: Set version env
#        id: version
#        env:
#          github_ref: ${{ github.ref }}
#        run: echo "::set-output name=oso_version::${github_ref/refs\/tags\/v/}"
#      - name: Download oso dylibs
#        uses: actions/download-artifact@v1
#        with:
#          name: oso_library
#      - name: Zip libraries
#        run: zip --junk-paths -r oso-lib.zip oso_library/
#      - name: Download oso python wheels from package run
#        uses: actions/download-artifact@v1
#        with:
#          name: wheel
#      - name: Zip wheels
#        run: zip --junk-paths -r oso-python.zip wheel/
#      - name: Download oso gem from package run
#        uses: actions/download-artifact@v1
#        with:
#          name: gem
#      - name: Zip ruby gem
#        run: zip --junk-paths -r oso-ruby.zip gem/
#      - name: Download oso jar from package run
#        uses: actions/download-artifact@v1
#        with:
#          name: jar
#      - name: Zip Java JAR
#        run: zip --junk-paths -r oso-java.zip jar/
#      - name: Download oso javascript package from package run
#        uses: actions/download-artifact@v1
#        with:
#          name: oso_js_node
#      - name: Create JS release artifact
#        working-directory: oso_js_node
#        run: npm pack
#      - name: Download oso go lib
#        uses: actions/download-artifact@v1
#        with:
#          name: go
#      - name: Zip Go source code
#        run: zip -r go-oso.zip go/
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@latest
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: v${{ steps.version.outputs.oso_version }}
#          release_name: oso ${{ steps.version.outputs.oso_version }}
#          body: |
#            oso ${{ steps.version.outputs.oso_version }}
#          draft: false
#          prerelease: true
#      - name: Upload Libraries
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./oso-lib.zip
#          asset_name: oso-lib-${{ steps.version.outputs.oso_version }}.zip
#          asset_content_type: application/zip
#      - name: Upload Python Package
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./oso-python.zip
#          asset_name: oso-python-${{ steps.version.outputs.oso_version }}.zip
#          asset_content_type: application/zip
#      - name: Upload Ruby Gem
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./oso-ruby.zip
#          asset_name: oso-ruby-${{ steps.version.outputs.oso_version }}.zip
#          asset_content_type: application/zip
#      - name: Upload Java Jar
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./oso-java.zip
#          asset_name: oso-java-${{ steps.version.outputs.oso_version }}.zip
#          asset_content_type: application/zip
#      - name: Upload Js Package
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./oso_js_node/oso-${{ steps.version.outputs.oso_version }}.tgz
#          asset_name: oso-js-node-${{ steps.version.outputs.oso_version }}.tgz
#          asset_content_type: application/gzip
#      - name: Upload go package
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./go-oso.zip
#          asset_name: go-oso-${{ steps.version.outputs.oso_version }}.zip
#          asset_content_type: application/zip
